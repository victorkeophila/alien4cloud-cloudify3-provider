#parse("provider/common/generic_resource.yaml.vm")
#foreach($compute in ${deployment.computes})
#set($computeHardSetPassword = ${compute.nodeTemplate.properties.get("password").value})
#set($computeIsWindows = (${compute.nodeTemplate.type} == "alien.nodes.openstack.WindowsCompute"))
  ${compute.id}:
    type: ${compute.nodeTemplate.type}
    properties: ${util.natives.formatProperties(3, $compute.nodeTemplate.properties, $deployment.propertyMappings, $compute.nodeTemplate.type)}
#if($computeHardSetPassword)
      use_password: false
#end
#set( $publicNetworks = ${util.network.getExternalNetworks($compute)} )
#set( $privateNetworks = ${util.network.getInternalNetworks($compute)} )
#if($util.collectionHasElement(${publicNetworks}) || $util.collectionHasElement(${privateNetworks}) || (!$computeHardSetPassword && $computeIsWindows))
    relationships:
#foreach($internalNetwork in $privateNetworks)
      - target: ${internalNetwork.id}
        type: cloudify.relationships.connected_to
      - target: ${mapping.generatedNodePrefix}_${internalNetwork.id}_subnet
        type: cloudify.relationships.depends_on
#end
#foreach($externalNetwork in $publicNetworks)
      - target: ${mapping.generatedNodePrefix}_floating_ip_${compute.id}_on_${externalNetwork.id}
        type: cloudify.openstack.server_connected_to_floating_ip
#end
#end
#if($computeIsWindows)
#parse("provider/openstack/computes/compute_node_win.yaml.vm")
#else
    interfaces:
#parse("provider/common/monitoring_interfaces.yaml.vm")
#end
#foreach($externalNetwork in $publicNetworks)
  $util.network.generateFloatingIpNodeName(${compute.id},${externalNetwork.id}):
    type: ${externalNetwork.nodeTemplate.type}
    properties: ${util.natives.formatProperties(3, ${externalNetwork.nodeTemplate.properties}, ${util.natives.loadPropertyMapping(${externalNetwork.indexedToscaElement}, "_a4c_c3_floating_ip_prop_map")})}
#end
#end
